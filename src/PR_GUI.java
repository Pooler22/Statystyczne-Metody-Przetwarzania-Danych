
import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import Jama.*;
import org.paukov.combinatorics.Factory;
import org.paukov.combinatorics.Generator;
import org.paukov.combinatorics.ICombinatoricsVector;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * PR_GUI.java
 *
 * Created on 2015-03-05, 19:40:56
 */
/**
 *
 * @author krzy
 */
public class PR_GUI extends javax.swing.JFrame {

    String InData; // dataset from a text file will be placed here
    int ClassCount = 0, FeatureCount = 0;
    double[][] F, FNew; // original feature matrix and transformed feature matrix
    int[] ClassLabels, SampleCount;
    String[] ClassNames;

    /**
     * Creates new form PR_GUI
     */
    public PR_GUI() {
        initComponents();
        setSize(720, 410);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ReadDatasetButton = new javax.swing.JButton();
        ParseDatasetButton = new javax.swing.JButton();
        InfoPanel = new javax.swing.JPanel();
        InfoLabel = new javax.swing.JLabel();
        DatasetNameLabel = new javax.swing.JLabel();
        ValueDatasetNameLabel = new javax.swing.JLabel();
        ClassesLabel = new javax.swing.JLabel();
        FeaturesLabel = new javax.swing.JLabel();
        ValueFeaturesLabel = new javax.swing.JLabel();
        FeatureSpacePanel = new javax.swing.JPanel();
        FeatureLabel = new javax.swing.JLabel();
        FSDimensionLabel = new javax.swing.JLabel();
        FSDimensionComboBox = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        CriterionLabel = new javax.swing.JLabel();
        FeatureSelectionRadioButton = new javax.swing.JRadioButton();
        FisherCriterionComboBox = new javax.swing.JComboBox();
        FeatureExtarctionRadioButton = new javax.swing.JRadioButton();
        PCALDAComboBox = new javax.swing.JComboBox();
        EnergyLabel = new javax.swing.JLabel();
        PCAEnergyTextField = new javax.swing.JTextField();
        Percent2Label = new javax.swing.JLabel();
        NewDimensionLabel = new javax.swing.JLabel();
        ValueNewDimensionLabel = new javax.swing.JLabel();
        DeriveFeatureSpaceButton = new javax.swing.JButton();
        ResoultsPanel = new javax.swing.JPanel();
        FSWinnerLabel = new javax.swing.JLabel();
        ValueFSWinnerLabel = new javax.swing.JLabel();
        FLDWinnerLabel = new javax.swing.JLabel();
        ValueFLDWinnerLabel = new javax.swing.JLabel();
        ValuesResoultsPanel = new javax.swing.JPanel();
        ClassifierPanel = new javax.swing.JPanel();
        ClassifierLabel = new javax.swing.JLabel();
        MethodLabel = new javax.swing.JLabel();
        MethodComboBox = new javax.swing.JComboBox();
        TrainButton = new javax.swing.JButton();
        ExecuteButton = new javax.swing.JButton();
        TrainingLabel = new javax.swing.JLabel();
        TrainSetSizeTextField = new javax.swing.JTextField();
        PercentLabel = new javax.swing.JLabel();
        ResultTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ReadDatasetButton.setText("Read dataset");
        ReadDatasetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadDatasetButtonActionPerformed(evt);
            }
        });

        ParseDatasetButton.setText("Parse dataset");
        ParseDatasetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParseDatasetButtonActionPerformed(evt);
            }
        });

        InfoPanel.setBackground(new java.awt.Color(204, 255, 255));
        InfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        InfoLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        InfoLabel.setText("Dataset info");

        DatasetNameLabel.setText("Name:");

        ValueDatasetNameLabel.setText("...");

        ClassesLabel.setText("Classes:");

        FeaturesLabel.setText("Features:");

        ValueFeaturesLabel.setText("...");

        javax.swing.GroupLayout InfoPanelLayout = new javax.swing.GroupLayout(InfoPanel);
        InfoPanel.setLayout(InfoPanelLayout);
        InfoPanelLayout.setHorizontalGroup(
            InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InfoPanelLayout.createSequentialGroup()
                        .addComponent(DatasetNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(ValueDatasetNameLabel))
                    .addComponent(InfoLabel))
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InfoPanelLayout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(ClassesLabel))
                    .addGroup(InfoPanelLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(FeaturesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ValueFeaturesLabel)))
                .addGap(100, 100, 100))
        );
        InfoPanelLayout.setVerticalGroup(
            InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InfoPanelLayout.createSequentialGroup()
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InfoLabel)
                    .addComponent(ClassesLabel))
                .addGap(10, 10, 10)
                .addGroup(InfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DatasetNameLabel)
                    .addComponent(FeaturesLabel)
                    .addComponent(ValueDatasetNameLabel)
                    .addComponent(ValueFeaturesLabel))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        FeatureSpacePanel.setBackground(new java.awt.Color(255, 255, 204));
        FeatureSpacePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        FeatureLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        FeatureLabel.setText("Feature space");

        FSDimensionLabel.setText("FS Dimension");

        FSDimensionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));

        CriterionLabel.setText("Criterion");

        FeatureSelectionRadioButton.setBackground(new java.awt.Color(255, 255, 204));
        FeatureSelectionRadioButton.setSelected(true);
        FeatureSelectionRadioButton.setText("Feature selection");
        FeatureSelectionRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeatureSelectionRadioButtonActionPerformed(evt);
            }
        });

        FisherCriterionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fisher discriminant", "SFS", "Classification error" }));

        FeatureExtarctionRadioButton.setBackground(new java.awt.Color(255, 255, 204));
        FeatureExtarctionRadioButton.setText("Feature extraction");
        FeatureExtarctionRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FeatureExtarctionRadioButtonActionPerformed(evt);
            }
        });

        PCALDAComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PCA", "LDA" }));
        PCALDAComboBox.setEnabled(false);

        EnergyLabel.setText("Energy");

        PCAEnergyTextField.setText("80");

        Percent2Label.setText("%");

        NewDimensionLabel.setText("New dimension:");

        ValueNewDimensionLabel.setText("...");

        DeriveFeatureSpaceButton.setText("Derive Feature Space");
        DeriveFeatureSpaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeriveFeatureSpaceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FeatureSpacePanelLayout = new javax.swing.GroupLayout(FeatureSpacePanel);
        FeatureSpacePanel.setLayout(FeatureSpacePanelLayout);
        FeatureSpacePanelLayout.setHorizontalGroup(
            FeatureSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(FeatureLabel)
                .addGap(46, 46, 46)
                .addComponent(FSDimensionLabel)
                .addGap(27, 27, 27)
                .addComponent(FSDimensionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(FeatureSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FeatureSelectionRadioButton)
                    .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(CriterionLabel))
                    .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                        .addGap(150, 150, 150)
                        .addComponent(FisherCriterionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(FeatureExtarctionRadioButton)
                .addGap(65, 65, 65)
                .addComponent(PCALDAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(EnergyLabel)
                .addGap(16, 16, 16)
                .addComponent(PCAEnergyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(Percent2Label, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(NewDimensionLabel)
                .addGap(35, 35, 35)
                .addComponent(ValueNewDimensionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(DeriveFeatureSpaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        FeatureSpacePanelLayout.setVerticalGroup(
            FeatureSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                .addGroup(FeatureSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FeatureLabel)
                    .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(FSDimensionLabel))
                    .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(FSDimensionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(13, 13, 13)
                .addGroup(FeatureSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(FeatureSelectionRadioButton))
                    .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(CriterionLabel))
                    .addGroup(FeatureSpacePanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(FisherCriterionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(FeatureSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FeatureExtarctionRadioButton)
                    .addComponent(PCALDAComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(FeatureSpacePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EnergyLabel)
                    .addComponent(PCAEnergyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Percent2Label)
                    .addComponent(NewDimensionLabel)
                    .addComponent(ValueNewDimensionLabel))
                .addGap(10, 10, 10)
                .addComponent(DeriveFeatureSpaceButton))
        );

        ResoultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        FSWinnerLabel.setText("FS Winner:");

        ValueFSWinnerLabel.setText("xxx");

        FLDWinnerLabel.setText("FLD value: ");

        ValueFLDWinnerLabel.setText("vvv");

        javax.swing.GroupLayout ResoultsPanelLayout = new javax.swing.GroupLayout(ResoultsPanel);
        ResoultsPanel.setLayout(ResoultsPanelLayout);
        ResoultsPanelLayout.setHorizontalGroup(
            ResoultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResoultsPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(ResoultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ResoultsPanelLayout.createSequentialGroup()
                        .addComponent(FSWinnerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(ValueFSWinnerLabel))
                    .addGroup(ResoultsPanelLayout.createSequentialGroup()
                        .addComponent(FLDWinnerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(ValueFLDWinnerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        ResoultsPanelLayout.setVerticalGroup(
            ResoultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ResoultsPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(ResoultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FSWinnerLabel)
                    .addComponent(ValueFSWinnerLabel))
                .addGap(16, 16, 16)
                .addGroup(ResoultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FLDWinnerLabel)
                    .addComponent(ValueFLDWinnerLabel)))
        );

        ValuesResoultsPanel.setBackground(new java.awt.Color(255, 255, 255));
        ValuesResoultsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout ValuesResoultsPanelLayout = new javax.swing.GroupLayout(ValuesResoultsPanel);
        ValuesResoultsPanel.setLayout(ValuesResoultsPanelLayout);
        ValuesResoultsPanelLayout.setHorizontalGroup(
            ValuesResoultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 156, Short.MAX_VALUE)
        );
        ValuesResoultsPanelLayout.setVerticalGroup(
            ValuesResoultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        ClassifierPanel.setBackground(new java.awt.Color(204, 255, 204));
        ClassifierPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        ClassifierLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        ClassifierLabel.setText("Classifier");

        MethodLabel.setText("Method");

        MethodComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nearest neighbor (NN)", "Nearest Mean (NM)", "k-Nearest Neighbor (k-NN)", "k-Nearest Mean (k-NM)" }));

        TrainButton.setText("Train");
        TrainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TrainButtonActionPerformed(evt);
            }
        });

        ExecuteButton.setText("Execute");

        TrainingLabel.setText("Training part:");

        TrainSetSizeTextField.setText("80");

        PercentLabel.setText("%");

        ResultTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResultTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ClassifierPanelLayout = new javax.swing.GroupLayout(ClassifierPanel);
        ClassifierPanel.setLayout(ClassifierPanelLayout);
        ClassifierPanelLayout.setHorizontalGroup(
            ClassifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClassifierPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(ResultTextField)
                .addContainerGap())
            .addGroup(ClassifierPanelLayout.createSequentialGroup()
                .addGroup(ClassifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClassifierPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(ClassifierLabel))
                    .addGroup(ClassifierPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(TrainButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(ExecuteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ClassifierPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(TrainingLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(TrainSetSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(PercentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ClassifierPanelLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(MethodLabel)
                        .addGap(24, 24, 24)
                        .addComponent(MethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        ClassifierPanelLayout.setVerticalGroup(
            ClassifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ClassifierPanelLayout.createSequentialGroup()
                .addComponent(ClassifierLabel)
                .addGap(15, 15, 15)
                .addGroup(ClassifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ClassifierPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(MethodLabel))
                    .addComponent(MethodComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ClassifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TrainButton)
                    .addComponent(ExecuteButton))
                .addGap(17, 17, 17)
                .addGroup(ClassifierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TrainingLabel)
                    .addComponent(TrainSetSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PercentLabel)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(ReadDatasetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)
                                .addComponent(ParseDatasetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(InfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addComponent(ResoultsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(ValuesResoultsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(FeatureSpacePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(ClassifierPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ReadDatasetButton)
                            .addComponent(ParseDatasetButton))
                        .addGap(17, 17, 17)
                        .addComponent(InfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ResoultsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ValuesResoultsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FeatureSpacePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(ClassifierPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FeatureSelectionRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeatureSelectionRadioButtonActionPerformed
        FisherCriterionComboBox.setEnabled(true);
        FeatureExtarctionRadioButton.setSelected(false);
        PCALDAComboBox.setEnabled(false);
    }//GEN-LAST:event_FeatureSelectionRadioButtonActionPerformed

    private void FeatureExtarctionRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FeatureExtarctionRadioButtonActionPerformed
        FisherCriterionComboBox.setEnabled(false);
        FeatureSelectionRadioButton.setSelected(false);
        PCALDAComboBox.setEnabled(true);
    }//GEN-LAST:event_FeatureExtarctionRadioButtonActionPerformed

    private void ReadDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadDatasetButtonActionPerformed
        // reads in a text file; contents is placed into a variable of String type
        InData = readDataSet();
    }//GEN-LAST:event_ReadDatasetButtonActionPerformed

    private void ParseDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParseDatasetButtonActionPerformed
        // Analyze text inputted from a file: determine class number and labels and number
        // of features; build feature matrix: columns - samples, rows - features
        try {
            if (InData != null) {
                getDatasetParameters();
                ValueFeaturesLabel.setText(FeatureCount + "");
                fillFeatureMatrix();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }

    }//GEN-LAST:event_ParseDatasetButtonActionPerformed

    private void DeriveFeatureSpaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeriveFeatureSpaceButtonActionPerformed
        // derive optimal feature space
        if (F == null) {
            return;
        }
        if (FeatureSelectionRadioButton.isSelected()) {
            // the chosen strategy is feature selection
            int[] flags = new int[FeatureCount];
            int tmp = Integer.parseInt((String) FSDimensionComboBox.getSelectedItem());

            String tmp1 = (String) FisherCriterionComboBox.getSelectedItem();
            if (tmp1.equals("SFS")) {
                ValueFSWinnerLabel.setText(selectFeaturesSFS(flags, tmp) + "");
            } else {
                ValueFSWinnerLabel.setText(selectFeatures(flags, tmp) + "");
            }
        } else if (FeatureExtarctionRadioButton.isSelected()) {
            double TotEnergy = Double.parseDouble(PCAEnergyTextField.getText()) / 100.0;
            // Target dimension (if k>0) or flag for energy-based dimension (k=0)
            int k = 0;
//            double[][] FF = { {1,1}, {1,2}};
//            double[][] FF = { {-2,0,2}, {-1,0,1}};
            // F is an array of initial features, FNew is the resulting array
            double[][] FFNorm = centerAroundMean(F);
            Matrix Cov = computeCovarianceMatrix(FFNorm);
            Matrix TransformMat = extractFeatures(Cov, TotEnergy, k);
            FNew = projectSamples(new Matrix(FFNorm), TransformMat);
            // FNew is a matrix with samples projected to a new feature space
            ValueNewDimensionLabel.setText(FNew.length + "");
        }
    }//GEN-LAST:event_DeriveFeatureSpaceButtonActionPerformed

    private void TrainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TrainButtonActionPerformed

        // first step: split dataset (in new feature space) into training / testing parts
        if (FNew == null) {
            return; // no reduced feature space have been derived
        }
        String selectedItem = (String) MethodComboBox.getSelectedItem();
        Classifier Cl;
        if (selectedItem.equals("Nearest neighbor (NN)")) {
            Cl = new NNClassifier(ClassLabels, SampleCount);
        } else {// if (selectedItem.equals("Nearest Mean (NM)")) {
            Cl = new NMClassifier(ClassLabels, SampleCount);
        }

        Cl.generateTrainingAndTestSets(FNew, TrainSetSizeTextField.getText());
        ResultTextField.setText(Double.toString(Cl.execute()));

    }//GEN-LAST:event_TrainButtonActionPerformed

    private void ResultTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResultTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResultTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new PR_GUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClassesLabel;
    private javax.swing.JLabel ClassifierLabel;
    private javax.swing.JPanel ClassifierPanel;
    private javax.swing.JLabel CriterionLabel;
    private javax.swing.JLabel DatasetNameLabel;
    private javax.swing.JButton DeriveFeatureSpaceButton;
    private javax.swing.JLabel EnergyLabel;
    private javax.swing.JButton ExecuteButton;
    private javax.swing.JLabel FLDWinnerLabel;
    private javax.swing.JComboBox FSDimensionComboBox;
    private javax.swing.JLabel FSDimensionLabel;
    private javax.swing.JLabel FSWinnerLabel;
    private javax.swing.JRadioButton FeatureExtarctionRadioButton;
    private javax.swing.JLabel FeatureLabel;
    private javax.swing.JRadioButton FeatureSelectionRadioButton;
    private javax.swing.JPanel FeatureSpacePanel;
    private javax.swing.JLabel FeaturesLabel;
    private javax.swing.JComboBox FisherCriterionComboBox;
    private javax.swing.JLabel InfoLabel;
    private javax.swing.JPanel InfoPanel;
    private javax.swing.JComboBox MethodComboBox;
    private javax.swing.JLabel MethodLabel;
    private javax.swing.JLabel NewDimensionLabel;
    private javax.swing.JTextField PCAEnergyTextField;
    private javax.swing.JComboBox PCALDAComboBox;
    private javax.swing.JButton ParseDatasetButton;
    private javax.swing.JLabel Percent2Label;
    private javax.swing.JLabel PercentLabel;
    private javax.swing.JButton ReadDatasetButton;
    private javax.swing.JPanel ResoultsPanel;
    private javax.swing.JTextField ResultTextField;
    private javax.swing.JButton TrainButton;
    private javax.swing.JTextField TrainSetSizeTextField;
    private javax.swing.JLabel TrainingLabel;
    private javax.swing.JLabel ValueDatasetNameLabel;
    private javax.swing.JLabel ValueFLDWinnerLabel;
    private javax.swing.JLabel ValueFSWinnerLabel;
    private javax.swing.JLabel ValueFeaturesLabel;
    private javax.swing.JLabel ValueNewDimensionLabel;
    private javax.swing.JPanel ValuesResoultsPanel;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    private String readDataSet() {

        String s_tmp, s_out = "";
        JFileChooser jfc = new JFileChooser();
        jfc.setCurrentDirectory(new File(".."));
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Datasets - plain text files", "txt");
        jfc.setFileFilter(filter);
        if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                try (BufferedReader br = new BufferedReader(new FileReader(jfc.getSelectedFile()))) {
                    while ((s_tmp = br.readLine()) != null) {
                        s_out += s_tmp + '$';
                    }
                }
                ValueDatasetNameLabel.setText(jfc.getSelectedFile().getName());
            } catch (Exception e) {
            }
        }
        return s_out;
    }

    private void getDatasetParameters() throws Exception {
        // based on data stored in InData determine: class count and names, number of samples 
        // and number of features; set the corresponding variables
        String stmp = InData, saux;
        // analyze the first line and get feature count: assume that number of features
        // equals number of commas
        saux = InData.substring(InData.indexOf(',') + 1, InData.indexOf('$'));
        if (saux.length() == 0) {
            throw new Exception("The first line is empty");
        }
        // saux stores the first line beginning from the first comma
        int count = 0;
        while (saux.indexOf(',') > 0) {
            saux = saux.substring(saux.indexOf(',') + 1);
            count++;
        }
        FeatureCount = count + 1; // the first parameter
        // Determine number of classes, class names and number of samples per class
        boolean New;
        int index = -1;
        List<String> NameList = new ArrayList<>();
        List<Integer> CountList = new ArrayList<>();
        List<Integer> LabelList = new ArrayList<>();
        while (stmp.length() > 1) {
            saux = stmp.substring(0, stmp.indexOf(' '));
            New = true;
            index++; // new class index
            for (int i = 0; i < NameList.size(); i++) {
                if (saux.equals(NameList.get(i))) {
                    New = false;
                    index = i; // class index
                }
            }
            if (New) {
                NameList.add(saux);
                CountList.add(0);
            } else {
                CountList.set(index, CountList.get(index) + 1);
            }
            LabelList.add(index); // class index for current row
            stmp = stmp.substring(stmp.indexOf('$') + 1);
        }
        // based on results of the above analysis, create variables
        ClassNames = new String[NameList.size()];
        for (int i = 0; i < ClassNames.length; i++) {
            ClassNames[i] = NameList.get(i);
        }
        SampleCount = new int[CountList.size()];
        for (int i = 0; i < SampleCount.length; i++) {
            SampleCount[i] = CountList.get(i) + 1;
        }
        ClassLabels = new int[LabelList.size()];
        for (int i = 0; i < ClassLabels.length; i++) {
            ClassLabels[i] = LabelList.get(i);
        }
    }

    private void fillFeatureMatrix() throws Exception {
        // having determined array size and class labels, fills in the feature matrix
        int n = 0;
        String saux, stmp = InData;
        for (int i = 0; i < SampleCount.length; i++) {
            n += SampleCount[i];
        }
        if (n <= 0) {
            throw new Exception("no samples found");
        }
        F = new double[FeatureCount][n]; // samples are placed column-wise
        for (int j = 0; j < n; j++) {
            saux = stmp.substring(0, stmp.indexOf('$'));
            saux = saux.substring(stmp.indexOf(',') + 1);
            for (int i = 0; i < FeatureCount - 1; i++) {
                F[i][j] = Double.parseDouble(saux.substring(0, saux.indexOf(',')));
                saux = saux.substring(saux.indexOf(',') + 1);
            }
            F[FeatureCount - 1][j] = Double.parseDouble(saux);
            stmp = stmp.substring(stmp.indexOf('$') + 1);
        }
        int cc = 1;
    }

    private String selectFeaturesSFS(int[] flags, int d) {
        //step 1
        int max = selectFeatures(flags, 1);
        String out = "";
        int max1, max_ind = 0;
        out += String.valueOf(max);
        //step 2..n
        for (int j = 1; j < d; j++) {
            double FLD = 0, tmp;
            int max_ind2 = -1;
            Map<Double, String> map;
            map = new HashMap<>();

            for (int i = 0; i < FeatureCount; i++) {
                if (i != max) {
                    double G[][] = new double[2][];
                    G[0] = F[i];
                    G[1] = F[max];
                    tmp = computeFisherMD(G);
                    map.put(tmp, i + "");
                    if (tmp > FLD) {
                        FLD = tmp;
                        max_ind = i;
                        max_ind2 = j;
                    }
                }
            }
            Map<Double, String> map1 = new TreeMap<>(map);
            out += " " + (new ArrayList<>(map1.values())).get(map1.size() - 1);

        }
        return out;
    }

    private int selectFeatures(int[] flags, int d) {
        int max_ind = -1;
        int[] id=new int [d];
        if (d == 1) {
            max_ind = Fisher1D(max_ind);
        } else {
            double FLD = 0, tmp;
            int max_ind2 = -1;
            Map<Double, String> map;
            map = new HashMap<>();

            Generator<Integer> vector = count_combinations(d);
            //k = 2
            for (ICombinatoricsVector<Integer> combination : vector) {
                int j = 0;
                double[][] G = new double[d][];

                for(int i=0;i< combination.getSize();i++){

                    G[i] = F[combination.getValue(i)];
                    id[i] = combination.getValue(i);
//                    System.out.print(combination.getValue(i));
                }
                tmp = computeFisherMD(G);
                //System.out.print(" " + combination.getValue(i));
                map.put(tmp, idToString(id));
                if (tmp > FLD) {
                    FLD = tmp;
//                    max_ind = ;
                    System.out.println("NADPISANIE: " + tmp + " " + idToString(id));
                }
                j++;

            }

            Map<Double, String> map1 = new TreeMap<>(map);
            Set set2 = map1.entrySet();
            Iterator iterator2 = set2.iterator();
            while (iterator2.hasNext()) {
                Map.Entry me2 = (Map.Entry) iterator2.next();
                System.out.print(me2.getKey() + ": ");
                System.out.println(me2.getValue());
            }
        }
        int max_ind2[];
        max_ind2 = new int[FeatureCount];

        FNew = new double[d][];
        for (int j = 0; j < d; j++) {
            FNew[j] = F[max_ind2[j]];
        }
        return max_ind;
    }


    String idToString(int[] id){
        String str = new String();
        for(int i : id){
            str += i + " ";
        }
        return str;
    }

    private int Fisher1D(int max_ind) {
        double FLD = 0, tmp;
        for (int i = 0; i < FeatureCount; i++) {
            if ((tmp = computeFisherLD(F[i])) > FLD) {
                FLD = tmp;
                max_ind = i;
            }
        }
        return max_ind;
    }

    private double computeFisherMD(double[][] vec) { //vec[0] vac[1] ... vec[n]
        int indexA;
        int indexB;
        double result = 0;
        double[] mA = new double[vec.length],
                mB = new double[vec.length];

        double[][]
                A = new double[vec.length][SampleCount[0]],
                B = new double[vec.length][SampleCount[1]];

        for (int a = 0; a < vec.length; a++){
            mA[a] = 0;
            mB[a] = 0;
            indexA = 0;
            indexB = 0;
            for (int i = 0; i < vec[a].length; i++) {
                if (ClassLabels[i] == 0) {
                    mA[a] += vec[a][i];
                    A[a][indexA++] = vec[a][i];
                } else {
                    mB[a] += vec[a][i];
                    B[a][indexB++] = vec[a][i];
                }
            }

            mA[a] /= SampleCount[0];
            mB[a] /= SampleCount[1];

            int i;
            i = 0;
            for (double e : A[a]) {
                A[a][i] = e - mA[a];
                i++;
            }
            i = 0;
            for (double e : B[a]) {
                B[a][i] = e - mB[a];
                i++;
            }

            result += Math.pow((mB[a] - mA[a]), 2);
        }

        return Math.abs((Math.sqrt(result)) / (computeCovarianceMatrix(B).det() + computeCovarianceMatrix(A).det()));
    }

    Generator<Integer> count_combinations(int n){
        Vector<Integer> vector = new Vector<>(); //Diamonds are allowed in 7+
        for(int i= 0; i < 64;i++){
            vector.add(i);
        }
        vector.toString();
        ICombinatoricsVector<Integer> initialVector = Factory.createVector(vector);
        Generator<Integer> gen = Factory.createSimpleCombinationGenerator(initialVector, n);
        for (ICombinatoricsVector<Integer> combination : gen) {
            System.out.println(combination);
        }
        return gen;
    }

    private double computeFisherLD(double[] vec) {
        double mA = 0, mB = 0, sA = 0, sB = 0;
        for (int i = 0; i < vec.length; i++) {
            if (ClassLabels[i] == 0) {
                mA += vec[i];
                sA += vec[i] * vec[i];
            } else {
                mB += vec[i];
                sB += vec[i] * vec[i];
            }
        }
        mA /= SampleCount[0];
        mB /= SampleCount[1];
        sA = sA / SampleCount[0] - mA * mA;
        sB = sB / SampleCount[1] - mB * mB;
        return Math.abs(mA - mB) / (Math.sqrt(sA) + Math.sqrt(sB));
    }

    private Matrix extractFeatures(Matrix C, double Ek, int k) {

        Matrix evecs, evals;
        // compute eigen values and eigen vectors
        evecs = C.eig().getV();
        evals = C.eig().getD();

        // PM: projection matrix that will hold a set dominant eigenvectors
        Matrix PM;
        if (k > 0) {
            // preset dimension of new feature space
//            PM = new double[evecs.getRowDimension()][k];
            PM = evecs.getMatrix(0, evecs.getRowDimension() - 1,
                    evecs.getColumnDimension() - k, evecs.getColumnDimension() - 1);
        } else {
            // dimension will be determined based on scatter energy
            double TotEVal = evals.trace(); // total energy
            double EAccum = 0;
            int m = evals.getColumnDimension() - 1;
            while (EAccum < Ek * TotEVal) {
                EAccum += evals.get(m, m);
                m--;
            }
            PM = evecs.getMatrix(0, evecs.getRowDimension() - 1, m + 1, evecs.getColumnDimension() - 1);
        }

        /*            System.out.println("Eigenvectors");                
            for(int i=0; i<r; i++){
                for(int j=0; j<c; j++){
                    System.out.print(evecs[i][j]+" ");
                }
                System.out.println();                
            }
            System.out.println("Eigenvalues");                
            for(int i=0; i<r; i++){
                for(int j=0; j<c; j++){
                    System.out.print(evals[i][j]+" ");
                }
                System.out.println();                
            }
         */
        return PM;
    }

    private Matrix computeCovarianceMatrix(double[][] m) {
        Matrix M = new Matrix(m);
        Matrix MT = M.transpose();
        Matrix C = M.times(MT);
        return C;
    }

    private double[][] centerAroundMean(double[][] M) {
        double[] mean = new double[M.length];
        for (int i = 0; i < M.length; i++) {
            for (int j = 0; j < M[0].length; j++) {
                mean[i] += M[i][j];
            }
        }
        for (int i = 0; i < M.length; i++) {
            mean[i] /= M[0].length;
        }
        for (int i = 0; i < M.length; i++) {
            for (int j = 0; j < M[0].length; j++) {
                M[i][j] -= mean[i];
            }
        }
        return M;
    }

    private double[][] projectSamples(Matrix FOld, Matrix TransformMat) {
        return (FOld.transpose().times(TransformMat)).transpose().getArrayCopy();
    }
};
